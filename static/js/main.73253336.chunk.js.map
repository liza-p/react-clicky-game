{"version":3,"sources":["components/Navbar/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","style","width","href","message","score","Card","src","card","img","alt","height","onClick","onSelect","id","Cards","imgCards","map","key","Wrapper","clickedImageIds","App","useState","setImgCards","setMessage","setScore","cardId","includes","push","newCards","slice","forEach","el","i","randomI","Math","floor","random","length","tempr","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8RAsBeA,MAlBf,SAAgBC,GACd,OACE,yBAAKC,UAAU,iEACb,yBAAKA,UAAU,MAAMC,MAAO,CAACC,MAAM,SACjC,yBAAKF,UAAW,SAChB,uBAAGA,UAAU,eAAeG,KAAK,KAAjC,gBAEA,yBAAKH,UAAW,2BACdD,EAAMK,SAER,yBAAKJ,UAAW,2BAAhB,SACSD,EAAMM,U,MCZvB,SAASC,EAAKP,GACZ,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,eACb,yBAAKO,IAAK,QAAUR,EAAMS,KAAKC,IAC/BT,UAAU,mBAAmBU,IAAI,GACjCT,MAAO,CAACC,MAAM,QAASS,OAAQ,SAC/BC,QAAS,kBAAMb,EAAMc,SAASd,EAAMS,KAAKM,UAOnD,SAASC,EAAMhB,GACb,OACA,yBAAKC,UAAU,YAAYC,MAAO,CAACC,MAAM,UACvC,yBAAKF,UAAU,OAEXD,EAAMiB,SAASC,KAAI,SAAST,GAC1B,OACE,kBAACF,EAAD,CAAMY,IAAMV,EAAKM,GAAIN,KAAMA,EAAMK,SAAUd,EAAMc,gBAwB9CM,MAdf,SAAiBpB,GACf,OACE,6BACE,yBAAKC,UAAU,kCACb,yBAAKA,UAAU,aACb,yBAAKO,IAAI,wBAAwBN,MAAO,CAACU,OAAQ,WACjD,uBAAGX,UAAU,QAAb,8EAGJ,kBAACe,EAAD,CAAOC,SAAUjB,EAAMiB,SAAUH,SAAUd,EAAMc,aCvCnDO,G,MAAkB,IAkDPC,MAhDf,WAAgB,IAAD,EACmBC,mBAAS,CACvC,CAACR,GAAG,EAAEL,IAAI,gBACV,CAACK,GAAG,EAAEL,IAAI,aACV,CAACK,GAAG,EAAGL,IAAI,gBACX,CAACK,GAAG,EAAGL,IAAI,cACX,CAACK,GAAG,EAAGL,IAAI,YACX,CAACK,GAAG,EAAGL,IAAI,cACX,CAACK,GAAG,EAAGL,IAAI,iBACX,CAACK,GAAG,EAAGL,IAAI,cACX,CAACK,GAAG,EAAGL,IAAI,cACX,CAACK,GAAG,GAAIL,IAAI,eACZ,CAACK,GAAG,GAAIL,IAAI,YACZ,CAACK,GAAG,GAAIL,IAAI,iBAbD,mBACNO,EADM,KACIO,EADJ,OAeiBD,mBAAS,4BAf1B,mBAeNlB,EAfM,KAeGoB,EAfH,OAgBaF,mBAAS,GAhBtB,mBAgBNjB,EAhBM,KAgBCoB,EAhBD,KAwCb,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,CAAKI,QAASA,EAASC,MAAOA,IAC9B,kBAAC,EAAD,CAASW,SAAUA,EAAUH,SAzBhB,SAASa,GACxB,GAAIN,EAAgBO,SAASD,GAI3B,OAHAF,EAAW,2BACXC,EAAS,QACTL,EAAkB,IAIpBI,EAAW,oCACXC,EAASpB,EAAQ,GAEjBe,EAAgBQ,KAAKF,GAErB,IAAMG,EAAWb,EAASc,QAC1BD,EAASE,SAAQ,SAASC,EAAGC,GAC3B,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAASR,EAASS,QAC5CC,EAAQV,EAASI,GACvBJ,EAASI,GAAGJ,EAASK,GACrBL,EAASK,GAASK,KAEpBhB,EAAYM,QCjCIW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMrD,c","file":"static/js/main.73253336.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" className on the appropriate navigation link item\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar container-fluid navbar-expand-lg navbar-light bg-light\">\n      <div className=\"row\" style={{width:\"100%\"}}>\n        <div className =\"col-4\">\n        <a className=\"navbar-brand\" href=\"#\">Clicky Game</a>\n        </div>\n        <div className =\"col-4 navbar-brand mr-0\">\n         {props.message}\n        </div>\n        <div className =\"col-4 navbar-brand mr-0\">\n          Score {props.score}\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"col-12 col-sm-3\">\n      <div className=\"card mb-4\" >\n        <div className=\"text-center\">\n          <img src={'/img/' + props.card.img} \n          className=\"card-img-top p-2\" alt=\"\" \n          style={{width:\"150px\", height: \"150px\"}} \n          onClick={() => props.onSelect(props.card.id)}/>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction Cards(props) {\n  return (\n  <div className=\"container\" style={{width:\"800px\"}}>\n    <div className=\"row\">\n      {\n        props.imgCards.map(function(card){\n          return (\n            <Card key= {card.id} card={card} onSelect={props.onSelect}/>\n          )\n        })\n      }\n      \n    </div>\n  </div>\n  )\n}\n\nfunction Wrapper(props) {\n  return (\n    <div>\n      <div className=\"jumbotron jumbotron-fluid pt-0\">\n        <div className=\"container\">\n          <img src=\"/img/central-perk.jpg\" style={{height: '200px'}}/>\n          <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n        </div>\n      </div>\n      <Cards imgCards={props.imgCards} onSelect={props.onSelect}/>\n    </div>\n  )\n}\n\nexport default Wrapper;\n\n\n\n\n","import React, {useState} from 'react';\nimport Nav from './components/Navbar';\nimport Wrapper from './components/Wrapper';\nimport './App.css';\n\nlet clickedImageIds = [];\n\nfunction App() {\n  const [imgCards, setImgCards] = useState([\n    {id:1,img:'chandler.png'},\n    {id:2,img:'emily.png'},\n    {id:3, img:'gunther.jpeg'},\n    {id:4, img:'janice.jpg'},\n    {id:5, img:'joey.jpg'},\n    {id:6, img:'monica.png'},\n    {id:7, img:'mrtreeger.jpg'},\n    {id:8, img:'phoebe.jpg'},\n    {id:9, img:'rachel.jpg'},\n    {id:10, img:'richard.jpg'},\n    {id:11, img:'ross.jpg'},\n    {id:12, img:'rossMom.jpg'}\n  ]);\n  const [message, setMessage] = useState('Click an image to begin!');\n  const [score, setScore] = useState(0);\n\n  const onSelect = function(cardId){\n    if (clickedImageIds.includes(cardId)) {\n      setMessage('You\\'ve been bamboozled!');\n      setScore(0);\n      clickedImageIds = [];\n      return;\n    }\n\n    setMessage('Unbelievable, eleven is correct!');\n    setScore(score + 1);\n\n    clickedImageIds.push(cardId);\n\n    const newCards = imgCards.slice();\n    newCards.forEach(function(el,i){\n      const randomI = Math.floor(Math.random()*newCards.length);\n      const tempr = newCards[i];\n      newCards[i]=newCards[randomI];\n      newCards[randomI]=tempr;\n    });\n    setImgCards(newCards);\n  }\n  return (\n    <div className=\"App\">\n      <Nav message={message} score={score} />\n      <Wrapper imgCards={imgCards} onSelect={onSelect}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}